// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// Environment includes the GraphQL fields of Environment requested by the fragment Environment.
type Environment struct {
	Id        string `json:"id"`
	Name      string `json:"name"`
	ProjectId string `json:"projectId"`
}

// GetId returns Environment.Id, and is useful for accessing the field via an interface.
func (v *Environment) GetId() string { return v.Id }

// GetName returns Environment.Name, and is useful for accessing the field via an interface.
func (v *Environment) GetName() string { return v.Name }

// GetProjectId returns Environment.ProjectId, and is useful for accessing the field via an interface.
func (v *Environment) GetProjectId() string { return v.ProjectId }

type EnvironmentCreateInput struct {
	Ephemeral bool   `json:"ephemeral"`
	Name      string `json:"name"`
	ProjectId string `json:"projectId"`
	// [Experimental] Specifying this field will create a new environment that is a
	// fork of the specified environment. Changes made to forked environments will
	// not affect other environments, and vice versa.
	SourceEnvironmentId string `json:"sourceEnvironmentId"`
}

// GetEphemeral returns EnvironmentCreateInput.Ephemeral, and is useful for accessing the field via an interface.
func (v *EnvironmentCreateInput) GetEphemeral() bool { return v.Ephemeral }

// GetName returns EnvironmentCreateInput.Name, and is useful for accessing the field via an interface.
func (v *EnvironmentCreateInput) GetName() string { return v.Name }

// GetProjectId returns EnvironmentCreateInput.ProjectId, and is useful for accessing the field via an interface.
func (v *EnvironmentCreateInput) GetProjectId() string { return v.ProjectId }

// GetSourceEnvironmentId returns EnvironmentCreateInput.SourceEnvironmentId, and is useful for accessing the field via an interface.
func (v *EnvironmentCreateInput) GetSourceEnvironmentId() string { return v.SourceEnvironmentId }

// Plugin includes the GraphQL fields of Plugin requested by the fragment Plugin.
type Plugin struct {
	Id           string        `json:"id"`
	Name         string        `json:"name"`
	FriendlyName string        `json:"friendlyName"`
	Project      PluginProject `json:"project"`
}

// GetId returns Plugin.Id, and is useful for accessing the field via an interface.
func (v *Plugin) GetId() string { return v.Id }

// GetName returns Plugin.Name, and is useful for accessing the field via an interface.
func (v *Plugin) GetName() string { return v.Name }

// GetFriendlyName returns Plugin.FriendlyName, and is useful for accessing the field via an interface.
func (v *Plugin) GetFriendlyName() string { return v.FriendlyName }

// GetProject returns Plugin.Project, and is useful for accessing the field via an interface.
func (v *Plugin) GetProject() PluginProject { return v.Project }

type PluginCreateInput struct {
	EnvironmentId string `json:"environmentId"`
	FriendlyName  string `json:"friendlyName"`
	Name          string `json:"name"`
	ProjectId     string `json:"projectId"`
}

// GetEnvironmentId returns PluginCreateInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *PluginCreateInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetFriendlyName returns PluginCreateInput.FriendlyName, and is useful for accessing the field via an interface.
func (v *PluginCreateInput) GetFriendlyName() string { return v.FriendlyName }

// GetName returns PluginCreateInput.Name, and is useful for accessing the field via an interface.
func (v *PluginCreateInput) GetName() string { return v.Name }

// GetProjectId returns PluginCreateInput.ProjectId, and is useful for accessing the field via an interface.
func (v *PluginCreateInput) GetProjectId() string { return v.ProjectId }

// PluginProject includes the requested fields of the GraphQL type Project.
type PluginProject struct {
	Id string `json:"id"`
}

// GetId returns PluginProject.Id, and is useful for accessing the field via an interface.
func (v *PluginProject) GetId() string { return v.Id }

type PluginUpdateInput struct {
	FriendlyName string `json:"friendlyName"`
}

// GetFriendlyName returns PluginUpdateInput.FriendlyName, and is useful for accessing the field via an interface.
func (v *PluginUpdateInput) GetFriendlyName() string { return v.FriendlyName }

// Project includes the GraphQL fields of Project requested by the fragment Project.
type Project struct {
	Id           string                                           `json:"id"`
	Name         string                                           `json:"name"`
	Description  string                                           `json:"description"`
	IsPublic     bool                                             `json:"isPublic"`
	PrDeploys    bool                                             `json:"prDeploys"`
	Team         *ProjectTeam                                     `json:"team"`
	Environments ProjectEnvironmentsProjectEnvironmentsConnection `json:"environments"`
}

// GetId returns Project.Id, and is useful for accessing the field via an interface.
func (v *Project) GetId() string { return v.Id }

// GetName returns Project.Name, and is useful for accessing the field via an interface.
func (v *Project) GetName() string { return v.Name }

// GetDescription returns Project.Description, and is useful for accessing the field via an interface.
func (v *Project) GetDescription() string { return v.Description }

// GetIsPublic returns Project.IsPublic, and is useful for accessing the field via an interface.
func (v *Project) GetIsPublic() bool { return v.IsPublic }

// GetPrDeploys returns Project.PrDeploys, and is useful for accessing the field via an interface.
func (v *Project) GetPrDeploys() bool { return v.PrDeploys }

// GetTeam returns Project.Team, and is useful for accessing the field via an interface.
func (v *Project) GetTeam() *ProjectTeam { return v.Team }

// GetEnvironments returns Project.Environments, and is useful for accessing the field via an interface.
func (v *Project) GetEnvironments() ProjectEnvironmentsProjectEnvironmentsConnection {
	return v.Environments
}

type ProjectCreateInput struct {
	DefaultEnvironmentName string             `json:"defaultEnvironmentName"`
	Description            string             `json:"description"`
	IsPublic               bool               `json:"isPublic"`
	Name                   string             `json:"name"`
	Plugins                []string           `json:"plugins"`
	PrDeploys              bool               `json:"prDeploys"`
	Repo                   *ProjectCreateRepo `json:"repo"`
	TeamId                 *string            `json:"teamId"`
}

// GetDefaultEnvironmentName returns ProjectCreateInput.DefaultEnvironmentName, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetDefaultEnvironmentName() string { return v.DefaultEnvironmentName }

// GetDescription returns ProjectCreateInput.Description, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetDescription() string { return v.Description }

// GetIsPublic returns ProjectCreateInput.IsPublic, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetIsPublic() bool { return v.IsPublic }

// GetName returns ProjectCreateInput.Name, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetName() string { return v.Name }

// GetPlugins returns ProjectCreateInput.Plugins, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetPlugins() []string { return v.Plugins }

// GetPrDeploys returns ProjectCreateInput.PrDeploys, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetPrDeploys() bool { return v.PrDeploys }

// GetRepo returns ProjectCreateInput.Repo, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetRepo() *ProjectCreateRepo { return v.Repo }

// GetTeamId returns ProjectCreateInput.TeamId, and is useful for accessing the field via an interface.
func (v *ProjectCreateInput) GetTeamId() *string { return v.TeamId }

type ProjectCreateRepo struct {
	Branch       string `json:"branch"`
	FullRepoName string `json:"fullRepoName"`
}

// GetBranch returns ProjectCreateRepo.Branch, and is useful for accessing the field via an interface.
func (v *ProjectCreateRepo) GetBranch() string { return v.Branch }

// GetFullRepoName returns ProjectCreateRepo.FullRepoName, and is useful for accessing the field via an interface.
func (v *ProjectCreateRepo) GetFullRepoName() string { return v.FullRepoName }

// ProjectEnvironmentsProjectEnvironmentsConnection includes the requested fields of the GraphQL type ProjectEnvironmentsConnection.
type ProjectEnvironmentsProjectEnvironmentsConnection struct {
	Edges []ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge `json:"edges"`
}

// GetEdges returns ProjectEnvironmentsProjectEnvironmentsConnection.Edges, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentsProjectEnvironmentsConnection) GetEdges() []ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge {
	return v.Edges
}

// ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge includes the requested fields of the GraphQL type ProjectEnvironmentsConnectionEdge.
type ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge struct {
	Node ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment `json:"node"`
}

// GetNode returns ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge.Node, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdge) GetNode() ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment {
	return v.Node
}

// ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment includes the requested fields of the GraphQL type Environment.
type ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment struct {
	Id        string    `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
}

// GetId returns ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment.Id, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment) GetId() string {
	return v.Id
}

// GetName returns ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment.Name, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment) GetName() string {
	return v.Name
}

// GetCreatedAt returns ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment.CreatedAt, and is useful for accessing the field via an interface.
func (v *ProjectEnvironmentsProjectEnvironmentsConnectionEdgesProjectEnvironmentsConnectionEdgeNodeEnvironment) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// ProjectTeam includes the requested fields of the GraphQL type Team.
type ProjectTeam struct {
	Id string `json:"id"`
}

// GetId returns ProjectTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectTeam) GetId() string { return v.Id }

type ProjectUpdateInput struct {
	BaseEnvironmentId *string `json:"baseEnvironmentId,omitempty"`
	Description       string  `json:"description"`
	IsPublic          bool    `json:"isPublic"`
	Name              string  `json:"name"`
	PrDeploys         bool    `json:"prDeploys"`
	// [Experimental] Will be deprecated eventually
	PrForks bool `json:"prForks"`
}

// GetBaseEnvironmentId returns ProjectUpdateInput.BaseEnvironmentId, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetBaseEnvironmentId() *string { return v.BaseEnvironmentId }

// GetDescription returns ProjectUpdateInput.Description, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetDescription() string { return v.Description }

// GetIsPublic returns ProjectUpdateInput.IsPublic, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetIsPublic() bool { return v.IsPublic }

// GetName returns ProjectUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetName() string { return v.Name }

// GetPrDeploys returns ProjectUpdateInput.PrDeploys, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetPrDeploys() bool { return v.PrDeploys }

// GetPrForks returns ProjectUpdateInput.PrForks, and is useful for accessing the field via an interface.
func (v *ProjectUpdateInput) GetPrForks() bool { return v.PrForks }

// Service includes the GraphQL fields of Service requested by the fragment Service.
type Service struct {
	Id        string `json:"id"`
	Name      string `json:"name"`
	ProjectId string `json:"projectId"`
}

// GetId returns Service.Id, and is useful for accessing the field via an interface.
func (v *Service) GetId() string { return v.Id }

// GetName returns Service.Name, and is useful for accessing the field via an interface.
func (v *Service) GetName() string { return v.Name }

// GetProjectId returns Service.ProjectId, and is useful for accessing the field via an interface.
func (v *Service) GetProjectId() string { return v.ProjectId }

type ServiceCreateInput struct {
	Branch string `json:"branch"`
	// [Experimental] Environment ID. If the specified environment is a fork, the
	// service will only be created in it. Otherwise it will created in all
	// environments that are not forks of other environments
	EnvironmentId string                 `json:"environmentId"`
	Name          string                 `json:"name"`
	ProjectId     string                 `json:"projectId"`
	Source        ServiceSourceInput     `json:"source"`
	Variables     map[string]interface{} `json:"variables"`
}

// GetBranch returns ServiceCreateInput.Branch, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetBranch() string { return v.Branch }

// GetEnvironmentId returns ServiceCreateInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetName returns ServiceCreateInput.Name, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetName() string { return v.Name }

// GetProjectId returns ServiceCreateInput.ProjectId, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetProjectId() string { return v.ProjectId }

// GetSource returns ServiceCreateInput.Source, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetSource() ServiceSourceInput { return v.Source }

// GetVariables returns ServiceCreateInput.Variables, and is useful for accessing the field via an interface.
func (v *ServiceCreateInput) GetVariables() map[string]interface{} { return v.Variables }

type ServiceSourceInput struct {
	Image string `json:"image"`
	Repo  string `json:"repo"`
}

// GetImage returns ServiceSourceInput.Image, and is useful for accessing the field via an interface.
func (v *ServiceSourceInput) GetImage() string { return v.Image }

// GetRepo returns ServiceSourceInput.Repo, and is useful for accessing the field via an interface.
func (v *ServiceSourceInput) GetRepo() string { return v.Repo }

type ServiceUpdateInput struct {
	Icon string `json:"icon"`
	Name string `json:"name"`
}

// GetIcon returns ServiceUpdateInput.Icon, and is useful for accessing the field via an interface.
func (v *ServiceUpdateInput) GetIcon() string { return v.Icon }

// GetName returns ServiceUpdateInput.Name, and is useful for accessing the field via an interface.
func (v *ServiceUpdateInput) GetName() string { return v.Name }

type VariableDeleteInput struct {
	EnvironmentId string  `json:"environmentId"`
	Name          string  `json:"name"`
	ProjectId     string  `json:"projectId"`
	ServiceId     *string `json:"serviceId"`
}

// GetEnvironmentId returns VariableDeleteInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *VariableDeleteInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetName returns VariableDeleteInput.Name, and is useful for accessing the field via an interface.
func (v *VariableDeleteInput) GetName() string { return v.Name }

// GetProjectId returns VariableDeleteInput.ProjectId, and is useful for accessing the field via an interface.
func (v *VariableDeleteInput) GetProjectId() string { return v.ProjectId }

// GetServiceId returns VariableDeleteInput.ServiceId, and is useful for accessing the field via an interface.
func (v *VariableDeleteInput) GetServiceId() *string { return v.ServiceId }

type VariableUpsertInput struct {
	EnvironmentId string  `json:"environmentId"`
	Name          string  `json:"name"`
	ProjectId     string  `json:"projectId"`
	ServiceId     *string `json:"serviceId"`
	Value         string  `json:"value"`
}

// GetEnvironmentId returns VariableUpsertInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *VariableUpsertInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetName returns VariableUpsertInput.Name, and is useful for accessing the field via an interface.
func (v *VariableUpsertInput) GetName() string { return v.Name }

// GetProjectId returns VariableUpsertInput.ProjectId, and is useful for accessing the field via an interface.
func (v *VariableUpsertInput) GetProjectId() string { return v.ProjectId }

// GetServiceId returns VariableUpsertInput.ServiceId, and is useful for accessing the field via an interface.
func (v *VariableUpsertInput) GetServiceId() *string { return v.ServiceId }

// GetValue returns VariableUpsertInput.Value, and is useful for accessing the field via an interface.
func (v *VariableUpsertInput) GetValue() string { return v.Value }

// __createEnvironmentInput is used internally by genqlient
type __createEnvironmentInput struct {
	Input EnvironmentCreateInput `json:"input"`
}

// GetInput returns __createEnvironmentInput.Input, and is useful for accessing the field via an interface.
func (v *__createEnvironmentInput) GetInput() EnvironmentCreateInput { return v.Input }

// __createPluginInput is used internally by genqlient
type __createPluginInput struct {
	Input PluginCreateInput `json:"input"`
}

// GetInput returns __createPluginInput.Input, and is useful for accessing the field via an interface.
func (v *__createPluginInput) GetInput() PluginCreateInput { return v.Input }

// __createProjectInput is used internally by genqlient
type __createProjectInput struct {
	Input ProjectCreateInput `json:"input"`
}

// GetInput returns __createProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__createProjectInput) GetInput() ProjectCreateInput { return v.Input }

// __createServiceInput is used internally by genqlient
type __createServiceInput struct {
	Input ServiceCreateInput `json:"input"`
}

// GetInput returns __createServiceInput.Input, and is useful for accessing the field via an interface.
func (v *__createServiceInput) GetInput() ServiceCreateInput { return v.Input }

// __deleteEnvironmentInput is used internally by genqlient
type __deleteEnvironmentInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteEnvironmentInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteEnvironmentInput) GetId() string { return v.Id }

// __deletePluginInput is used internally by genqlient
type __deletePluginInput struct {
	Id string `json:"id"`
}

// GetId returns __deletePluginInput.Id, and is useful for accessing the field via an interface.
func (v *__deletePluginInput) GetId() string { return v.Id }

// __deleteProjectInput is used internally by genqlient
type __deleteProjectInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteProjectInput) GetId() string { return v.Id }

// __deleteServiceInput is used internally by genqlient
type __deleteServiceInput struct {
	Id string `json:"id"`
}

// GetId returns __deleteServiceInput.Id, and is useful for accessing the field via an interface.
func (v *__deleteServiceInput) GetId() string { return v.Id }

// __deleteVariableInput is used internally by genqlient
type __deleteVariableInput struct {
	Input VariableDeleteInput `json:"input"`
}

// GetInput returns __deleteVariableInput.Input, and is useful for accessing the field via an interface.
func (v *__deleteVariableInput) GetInput() VariableDeleteInput { return v.Input }

// __getEnvironmentInput is used internally by genqlient
type __getEnvironmentInput struct {
	Id string `json:"id"`
}

// GetId returns __getEnvironmentInput.Id, and is useful for accessing the field via an interface.
func (v *__getEnvironmentInput) GetId() string { return v.Id }

// __getEnvironmentsInput is used internally by genqlient
type __getEnvironmentsInput struct {
	ProjectId string `json:"projectId"`
}

// GetProjectId returns __getEnvironmentsInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getEnvironmentsInput) GetProjectId() string { return v.ProjectId }

// __getPluginInput is used internally by genqlient
type __getPluginInput struct {
	Id string `json:"id"`
}

// GetId returns __getPluginInput.Id, and is useful for accessing the field via an interface.
func (v *__getPluginInput) GetId() string { return v.Id }

// __getPluginVariablesInput is used internally by genqlient
type __getPluginVariablesInput struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
	PluginId      string `json:"pluginId"`
}

// GetProjectId returns __getPluginVariablesInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getPluginVariablesInput) GetProjectId() string { return v.ProjectId }

// GetEnvironmentId returns __getPluginVariablesInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__getPluginVariablesInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetPluginId returns __getPluginVariablesInput.PluginId, and is useful for accessing the field via an interface.
func (v *__getPluginVariablesInput) GetPluginId() string { return v.PluginId }

// __getProjectInput is used internally by genqlient
type __getProjectInput struct {
	Id string `json:"id"`
}

// GetId returns __getProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__getProjectInput) GetId() string { return v.Id }

// __getServiceInput is used internally by genqlient
type __getServiceInput struct {
	Id string `json:"id"`
}

// GetId returns __getServiceInput.Id, and is useful for accessing the field via an interface.
func (v *__getServiceInput) GetId() string { return v.Id }

// __getSharedVariablesInput is used internally by genqlient
type __getSharedVariablesInput struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
}

// GetProjectId returns __getSharedVariablesInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getSharedVariablesInput) GetProjectId() string { return v.ProjectId }

// GetEnvironmentId returns __getSharedVariablesInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__getSharedVariablesInput) GetEnvironmentId() string { return v.EnvironmentId }

// __getVariablesInput is used internally by genqlient
type __getVariablesInput struct {
	ProjectId     string `json:"projectId"`
	EnvironmentId string `json:"environmentId"`
	ServiceId     string `json:"serviceId"`
}

// GetProjectId returns __getVariablesInput.ProjectId, and is useful for accessing the field via an interface.
func (v *__getVariablesInput) GetProjectId() string { return v.ProjectId }

// GetEnvironmentId returns __getVariablesInput.EnvironmentId, and is useful for accessing the field via an interface.
func (v *__getVariablesInput) GetEnvironmentId() string { return v.EnvironmentId }

// GetServiceId returns __getVariablesInput.ServiceId, and is useful for accessing the field via an interface.
func (v *__getVariablesInput) GetServiceId() string { return v.ServiceId }

// __updatePluginInput is used internally by genqlient
type __updatePluginInput struct {
	Id    string            `json:"id"`
	Input PluginUpdateInput `json:"input"`
}

// GetId returns __updatePluginInput.Id, and is useful for accessing the field via an interface.
func (v *__updatePluginInput) GetId() string { return v.Id }

// GetInput returns __updatePluginInput.Input, and is useful for accessing the field via an interface.
func (v *__updatePluginInput) GetInput() PluginUpdateInput { return v.Input }

// __updateProjectInput is used internally by genqlient
type __updateProjectInput struct {
	Id    string             `json:"id"`
	Input ProjectUpdateInput `json:"input"`
}

// GetId returns __updateProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetId() string { return v.Id }

// GetInput returns __updateProjectInput.Input, and is useful for accessing the field via an interface.
func (v *__updateProjectInput) GetInput() ProjectUpdateInput { return v.Input }

// __updateServiceInput is used internally by genqlient
type __updateServiceInput struct {
	Id    string             `json:"id"`
	Input ServiceUpdateInput `json:"input"`
}

// GetId returns __updateServiceInput.Id, and is useful for accessing the field via an interface.
func (v *__updateServiceInput) GetId() string { return v.Id }

// GetInput returns __updateServiceInput.Input, and is useful for accessing the field via an interface.
func (v *__updateServiceInput) GetInput() ServiceUpdateInput { return v.Input }

// __upsertVariableInput is used internally by genqlient
type __upsertVariableInput struct {
	Input VariableUpsertInput `json:"input"`
}

// GetInput returns __upsertVariableInput.Input, and is useful for accessing the field via an interface.
func (v *__upsertVariableInput) GetInput() VariableUpsertInput { return v.Input }

// createEnvironmentEnvironmentCreateEnvironment includes the requested fields of the GraphQL type Environment.
type createEnvironmentEnvironmentCreateEnvironment struct {
	Environment `json:"-"`
}

// GetId returns createEnvironmentEnvironmentCreateEnvironment.Id, and is useful for accessing the field via an interface.
func (v *createEnvironmentEnvironmentCreateEnvironment) GetId() string { return v.Environment.Id }

// GetName returns createEnvironmentEnvironmentCreateEnvironment.Name, and is useful for accessing the field via an interface.
func (v *createEnvironmentEnvironmentCreateEnvironment) GetName() string { return v.Environment.Name }

// GetProjectId returns createEnvironmentEnvironmentCreateEnvironment.ProjectId, and is useful for accessing the field via an interface.
func (v *createEnvironmentEnvironmentCreateEnvironment) GetProjectId() string {
	return v.Environment.ProjectId
}

func (v *createEnvironmentEnvironmentCreateEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createEnvironmentEnvironmentCreateEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.createEnvironmentEnvironmentCreateEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Environment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateEnvironmentEnvironmentCreateEnvironment struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *createEnvironmentEnvironmentCreateEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createEnvironmentEnvironmentCreateEnvironment) __premarshalJSON() (*__premarshalcreateEnvironmentEnvironmentCreateEnvironment, error) {
	var retval __premarshalcreateEnvironmentEnvironmentCreateEnvironment

	retval.Id = v.Environment.Id
	retval.Name = v.Environment.Name
	retval.ProjectId = v.Environment.ProjectId
	return &retval, nil
}

// createEnvironmentResponse is returned by createEnvironment on success.
type createEnvironmentResponse struct {
	// Creates a new environment.
	EnvironmentCreate createEnvironmentEnvironmentCreateEnvironment `json:"environmentCreate"`
}

// GetEnvironmentCreate returns createEnvironmentResponse.EnvironmentCreate, and is useful for accessing the field via an interface.
func (v *createEnvironmentResponse) GetEnvironmentCreate() createEnvironmentEnvironmentCreateEnvironment {
	return v.EnvironmentCreate
}

// createPluginPluginCreatePlugin includes the requested fields of the GraphQL type Plugin.
type createPluginPluginCreatePlugin struct {
	Plugin `json:"-"`
}

// GetId returns createPluginPluginCreatePlugin.Id, and is useful for accessing the field via an interface.
func (v *createPluginPluginCreatePlugin) GetId() string { return v.Plugin.Id }

// GetName returns createPluginPluginCreatePlugin.Name, and is useful for accessing the field via an interface.
func (v *createPluginPluginCreatePlugin) GetName() string { return v.Plugin.Name }

// GetFriendlyName returns createPluginPluginCreatePlugin.FriendlyName, and is useful for accessing the field via an interface.
func (v *createPluginPluginCreatePlugin) GetFriendlyName() string { return v.Plugin.FriendlyName }

// GetProject returns createPluginPluginCreatePlugin.Project, and is useful for accessing the field via an interface.
func (v *createPluginPluginCreatePlugin) GetProject() PluginProject { return v.Plugin.Project }

func (v *createPluginPluginCreatePlugin) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createPluginPluginCreatePlugin
		graphql.NoUnmarshalJSON
	}
	firstPass.createPluginPluginCreatePlugin = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Plugin)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreatePluginPluginCreatePlugin struct {
	Id string `json:"id"`

	Name string `json:"name"`

	FriendlyName string `json:"friendlyName"`

	Project PluginProject `json:"project"`
}

func (v *createPluginPluginCreatePlugin) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createPluginPluginCreatePlugin) __premarshalJSON() (*__premarshalcreatePluginPluginCreatePlugin, error) {
	var retval __premarshalcreatePluginPluginCreatePlugin

	retval.Id = v.Plugin.Id
	retval.Name = v.Plugin.Name
	retval.FriendlyName = v.Plugin.FriendlyName
	retval.Project = v.Plugin.Project
	return &retval, nil
}

// createPluginResponse is returned by createPlugin on success.
type createPluginResponse struct {
	// Creates a new plugin.
	PluginCreate createPluginPluginCreatePlugin `json:"pluginCreate"`
}

// GetPluginCreate returns createPluginResponse.PluginCreate, and is useful for accessing the field via an interface.
func (v *createPluginResponse) GetPluginCreate() createPluginPluginCreatePlugin {
	return v.PluginCreate
}

// createProjectProjectCreateProject includes the requested fields of the GraphQL type Project.
type createProjectProjectCreateProject struct {
	Project `json:"-"`
}

// GetId returns createProjectProjectCreateProject.Id, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetId() string { return v.Project.Id }

// GetName returns createProjectProjectCreateProject.Name, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetName() string { return v.Project.Name }

// GetDescription returns createProjectProjectCreateProject.Description, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetDescription() string { return v.Project.Description }

// GetIsPublic returns createProjectProjectCreateProject.IsPublic, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetIsPublic() bool { return v.Project.IsPublic }

// GetPrDeploys returns createProjectProjectCreateProject.PrDeploys, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetPrDeploys() bool { return v.Project.PrDeploys }

// GetTeam returns createProjectProjectCreateProject.Team, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetTeam() *ProjectTeam { return v.Project.Team }

// GetEnvironments returns createProjectProjectCreateProject.Environments, and is useful for accessing the field via an interface.
func (v *createProjectProjectCreateProject) GetEnvironments() ProjectEnvironmentsProjectEnvironmentsConnection {
	return v.Project.Environments
}

func (v *createProjectProjectCreateProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createProjectProjectCreateProject
		graphql.NoUnmarshalJSON
	}
	firstPass.createProjectProjectCreateProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Project)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateProjectProjectCreateProject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	IsPublic bool `json:"isPublic"`

	PrDeploys bool `json:"prDeploys"`

	Team *ProjectTeam `json:"team"`

	Environments ProjectEnvironmentsProjectEnvironmentsConnection `json:"environments"`
}

func (v *createProjectProjectCreateProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createProjectProjectCreateProject) __premarshalJSON() (*__premarshalcreateProjectProjectCreateProject, error) {
	var retval __premarshalcreateProjectProjectCreateProject

	retval.Id = v.Project.Id
	retval.Name = v.Project.Name
	retval.Description = v.Project.Description
	retval.IsPublic = v.Project.IsPublic
	retval.PrDeploys = v.Project.PrDeploys
	retval.Team = v.Project.Team
	retval.Environments = v.Project.Environments
	return &retval, nil
}

// createProjectResponse is returned by createProject on success.
type createProjectResponse struct {
	// Creates a new project.
	ProjectCreate createProjectProjectCreateProject `json:"projectCreate"`
}

// GetProjectCreate returns createProjectResponse.ProjectCreate, and is useful for accessing the field via an interface.
func (v *createProjectResponse) GetProjectCreate() createProjectProjectCreateProject {
	return v.ProjectCreate
}

// createServiceResponse is returned by createService on success.
type createServiceResponse struct {
	// Creates a new service.
	ServiceCreate createServiceServiceCreateService `json:"serviceCreate"`
}

// GetServiceCreate returns createServiceResponse.ServiceCreate, and is useful for accessing the field via an interface.
func (v *createServiceResponse) GetServiceCreate() createServiceServiceCreateService {
	return v.ServiceCreate
}

// createServiceServiceCreateService includes the requested fields of the GraphQL type Service.
type createServiceServiceCreateService struct {
	Service `json:"-"`
}

// GetId returns createServiceServiceCreateService.Id, and is useful for accessing the field via an interface.
func (v *createServiceServiceCreateService) GetId() string { return v.Service.Id }

// GetName returns createServiceServiceCreateService.Name, and is useful for accessing the field via an interface.
func (v *createServiceServiceCreateService) GetName() string { return v.Service.Name }

// GetProjectId returns createServiceServiceCreateService.ProjectId, and is useful for accessing the field via an interface.
func (v *createServiceServiceCreateService) GetProjectId() string { return v.Service.ProjectId }

func (v *createServiceServiceCreateService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*createServiceServiceCreateService
		graphql.NoUnmarshalJSON
	}
	firstPass.createServiceServiceCreateService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Service)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcreateServiceServiceCreateService struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *createServiceServiceCreateService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *createServiceServiceCreateService) __premarshalJSON() (*__premarshalcreateServiceServiceCreateService, error) {
	var retval __premarshalcreateServiceServiceCreateService

	retval.Id = v.Service.Id
	retval.Name = v.Service.Name
	retval.ProjectId = v.Service.ProjectId
	return &retval, nil
}

// deleteEnvironmentResponse is returned by deleteEnvironment on success.
type deleteEnvironmentResponse struct {
	// Deletes an environment.
	EnvironmentDelete bool `json:"environmentDelete"`
}

// GetEnvironmentDelete returns deleteEnvironmentResponse.EnvironmentDelete, and is useful for accessing the field via an interface.
func (v *deleteEnvironmentResponse) GetEnvironmentDelete() bool { return v.EnvironmentDelete }

// deletePluginResponse is returned by deletePlugin on success.
type deletePluginResponse struct {
	// Deletes a plugin.
	PluginDelete bool `json:"pluginDelete"`
}

// GetPluginDelete returns deletePluginResponse.PluginDelete, and is useful for accessing the field via an interface.
func (v *deletePluginResponse) GetPluginDelete() bool { return v.PluginDelete }

// deleteProjectResponse is returned by deleteProject on success.
type deleteProjectResponse struct {
	// Deletes a project.
	ProjectDelete bool `json:"projectDelete"`
}

// GetProjectDelete returns deleteProjectResponse.ProjectDelete, and is useful for accessing the field via an interface.
func (v *deleteProjectResponse) GetProjectDelete() bool { return v.ProjectDelete }

// deleteServiceResponse is returned by deleteService on success.
type deleteServiceResponse struct {
	// Deletes a service.
	ServiceDelete bool `json:"serviceDelete"`
}

// GetServiceDelete returns deleteServiceResponse.ServiceDelete, and is useful for accessing the field via an interface.
func (v *deleteServiceResponse) GetServiceDelete() bool { return v.ServiceDelete }

// deleteVariableResponse is returned by deleteVariable on success.
type deleteVariableResponse struct {
	// Deletes a variable.
	VariableDelete bool `json:"variableDelete"`
}

// GetVariableDelete returns deleteVariableResponse.VariableDelete, and is useful for accessing the field via an interface.
func (v *deleteVariableResponse) GetVariableDelete() bool { return v.VariableDelete }

// getEnvironmentEnvironment includes the requested fields of the GraphQL type Environment.
type getEnvironmentEnvironment struct {
	Environment `json:"-"`
}

// GetId returns getEnvironmentEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentEnvironment) GetId() string { return v.Environment.Id }

// GetName returns getEnvironmentEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentEnvironment) GetName() string { return v.Environment.Name }

// GetProjectId returns getEnvironmentEnvironment.ProjectId, and is useful for accessing the field via an interface.
func (v *getEnvironmentEnvironment) GetProjectId() string { return v.Environment.ProjectId }

func (v *getEnvironmentEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getEnvironmentEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.getEnvironmentEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Environment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetEnvironmentEnvironment struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *getEnvironmentEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getEnvironmentEnvironment) __premarshalJSON() (*__premarshalgetEnvironmentEnvironment, error) {
	var retval __premarshalgetEnvironmentEnvironment

	retval.Id = v.Environment.Id
	retval.Name = v.Environment.Name
	retval.ProjectId = v.Environment.ProjectId
	return &retval, nil
}

// getEnvironmentResponse is returned by getEnvironment on success.
type getEnvironmentResponse struct {
	// Find a single environment
	Environment getEnvironmentEnvironment `json:"environment"`
}

// GetEnvironment returns getEnvironmentResponse.Environment, and is useful for accessing the field via an interface.
func (v *getEnvironmentResponse) GetEnvironment() getEnvironmentEnvironment { return v.Environment }

// getEnvironmentsEnvironmentsQueryEnvironmentsConnection includes the requested fields of the GraphQL type QueryEnvironmentsConnection.
type getEnvironmentsEnvironmentsQueryEnvironmentsConnection struct {
	Edges []getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge `json:"edges"`
}

// GetEdges returns getEnvironmentsEnvironmentsQueryEnvironmentsConnection.Edges, and is useful for accessing the field via an interface.
func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnection) GetEdges() []getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge {
	return v.Edges
}

// getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge includes the requested fields of the GraphQL type QueryEnvironmentsConnectionEdge.
type getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge struct {
	Node getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment `json:"node"`
}

// GetNode returns getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge.Node, and is useful for accessing the field via an interface.
func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdge) GetNode() getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment {
	return v.Node
}

// getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment includes the requested fields of the GraphQL type Environment.
type getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment struct {
	Environment `json:"-"`
}

// GetId returns getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment.Id, and is useful for accessing the field via an interface.
func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) GetId() string {
	return v.Environment.Id
}

// GetName returns getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment.Name, and is useful for accessing the field via an interface.
func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) GetName() string {
	return v.Environment.Name
}

// GetProjectId returns getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment.ProjectId, and is useful for accessing the field via an interface.
func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) GetProjectId() string {
	return v.Environment.ProjectId
}

func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment
		graphql.NoUnmarshalJSON
	}
	firstPass.getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Environment)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment) __premarshalJSON() (*__premarshalgetEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment, error) {
	var retval __premarshalgetEnvironmentsEnvironmentsQueryEnvironmentsConnectionEdgesQueryEnvironmentsConnectionEdgeNodeEnvironment

	retval.Id = v.Environment.Id
	retval.Name = v.Environment.Name
	retval.ProjectId = v.Environment.ProjectId
	return &retval, nil
}

// getEnvironmentsResponse is returned by getEnvironments on success.
type getEnvironmentsResponse struct {
	// Gets all environments for a project.
	Environments getEnvironmentsEnvironmentsQueryEnvironmentsConnection `json:"environments"`
}

// GetEnvironments returns getEnvironmentsResponse.Environments, and is useful for accessing the field via an interface.
func (v *getEnvironmentsResponse) GetEnvironments() getEnvironmentsEnvironmentsQueryEnvironmentsConnection {
	return v.Environments
}

// getPluginPlugin includes the requested fields of the GraphQL type Plugin.
type getPluginPlugin struct {
	Plugin `json:"-"`
}

// GetId returns getPluginPlugin.Id, and is useful for accessing the field via an interface.
func (v *getPluginPlugin) GetId() string { return v.Plugin.Id }

// GetName returns getPluginPlugin.Name, and is useful for accessing the field via an interface.
func (v *getPluginPlugin) GetName() string { return v.Plugin.Name }

// GetFriendlyName returns getPluginPlugin.FriendlyName, and is useful for accessing the field via an interface.
func (v *getPluginPlugin) GetFriendlyName() string { return v.Plugin.FriendlyName }

// GetProject returns getPluginPlugin.Project, and is useful for accessing the field via an interface.
func (v *getPluginPlugin) GetProject() PluginProject { return v.Plugin.Project }

func (v *getPluginPlugin) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getPluginPlugin
		graphql.NoUnmarshalJSON
	}
	firstPass.getPluginPlugin = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Plugin)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetPluginPlugin struct {
	Id string `json:"id"`

	Name string `json:"name"`

	FriendlyName string `json:"friendlyName"`

	Project PluginProject `json:"project"`
}

func (v *getPluginPlugin) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getPluginPlugin) __premarshalJSON() (*__premarshalgetPluginPlugin, error) {
	var retval __premarshalgetPluginPlugin

	retval.Id = v.Plugin.Id
	retval.Name = v.Plugin.Name
	retval.FriendlyName = v.Plugin.FriendlyName
	retval.Project = v.Plugin.Project
	return &retval, nil
}

// getPluginResponse is returned by getPlugin on success.
type getPluginResponse struct {
	// Get a plugin by ID.
	Plugin getPluginPlugin `json:"plugin"`
}

// GetPlugin returns getPluginResponse.Plugin, and is useful for accessing the field via an interface.
func (v *getPluginResponse) GetPlugin() getPluginPlugin { return v.Plugin }

// getPluginVariablesResponse is returned by getPluginVariables on success.
type getPluginVariablesResponse struct {
	// All variables by pluginId or serviceId. If neither are provided, all shared variables are returned.
	Variables map[string]interface{} `json:"variables"`
}

// GetVariables returns getPluginVariablesResponse.Variables, and is useful for accessing the field via an interface.
func (v *getPluginVariablesResponse) GetVariables() map[string]interface{} { return v.Variables }

// getProjectProject includes the requested fields of the GraphQL type Project.
type getProjectProject struct {
	Project `json:"-"`
}

// GetId returns getProjectProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetId() string { return v.Project.Id }

// GetName returns getProjectProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetName() string { return v.Project.Name }

// GetDescription returns getProjectProject.Description, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetDescription() string { return v.Project.Description }

// GetIsPublic returns getProjectProject.IsPublic, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetIsPublic() bool { return v.Project.IsPublic }

// GetPrDeploys returns getProjectProject.PrDeploys, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetPrDeploys() bool { return v.Project.PrDeploys }

// GetTeam returns getProjectProject.Team, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetTeam() *ProjectTeam { return v.Project.Team }

// GetEnvironments returns getProjectProject.Environments, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetEnvironments() ProjectEnvironmentsProjectEnvironmentsConnection {
	return v.Project.Environments
}

func (v *getProjectProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Project)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectProject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	IsPublic bool `json:"isPublic"`

	PrDeploys bool `json:"prDeploys"`

	Team *ProjectTeam `json:"team"`

	Environments ProjectEnvironmentsProjectEnvironmentsConnection `json:"environments"`
}

func (v *getProjectProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectProject) __premarshalJSON() (*__premarshalgetProjectProject, error) {
	var retval __premarshalgetProjectProject

	retval.Id = v.Project.Id
	retval.Name = v.Project.Name
	retval.Description = v.Project.Description
	retval.IsPublic = v.Project.IsPublic
	retval.PrDeploys = v.Project.PrDeploys
	retval.Team = v.Project.Team
	retval.Environments = v.Project.Environments
	return &retval, nil
}

// getProjectResponse is returned by getProject on success.
type getProjectResponse struct {
	// Get a project by ID
	Project getProjectProject `json:"project"`
}

// GetProject returns getProjectResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectResponse) GetProject() getProjectProject { return v.Project }

// getServiceResponse is returned by getService on success.
type getServiceResponse struct {
	// Get a service by ID
	Service getServiceService `json:"service"`
}

// GetService returns getServiceResponse.Service, and is useful for accessing the field via an interface.
func (v *getServiceResponse) GetService() getServiceService { return v.Service }

// getServiceService includes the requested fields of the GraphQL type Service.
type getServiceService struct {
	Service `json:"-"`
}

// GetId returns getServiceService.Id, and is useful for accessing the field via an interface.
func (v *getServiceService) GetId() string { return v.Service.Id }

// GetName returns getServiceService.Name, and is useful for accessing the field via an interface.
func (v *getServiceService) GetName() string { return v.Service.Name }

// GetProjectId returns getServiceService.ProjectId, and is useful for accessing the field via an interface.
func (v *getServiceService) GetProjectId() string { return v.Service.ProjectId }

func (v *getServiceService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getServiceService
		graphql.NoUnmarshalJSON
	}
	firstPass.getServiceService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Service)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetServiceService struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *getServiceService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getServiceService) __premarshalJSON() (*__premarshalgetServiceService, error) {
	var retval __premarshalgetServiceService

	retval.Id = v.Service.Id
	retval.Name = v.Service.Name
	retval.ProjectId = v.Service.ProjectId
	return &retval, nil
}

// getSharedVariablesResponse is returned by getSharedVariables on success.
type getSharedVariablesResponse struct {
	// All variables by pluginId or serviceId. If neither are provided, all shared variables are returned.
	Variables map[string]interface{} `json:"variables"`
}

// GetVariables returns getSharedVariablesResponse.Variables, and is useful for accessing the field via an interface.
func (v *getSharedVariablesResponse) GetVariables() map[string]interface{} { return v.Variables }

// getVariablesResponse is returned by getVariables on success.
type getVariablesResponse struct {
	// All variables by pluginId or serviceId. If neither are provided, all shared variables are returned.
	Variables map[string]interface{} `json:"variables"`
}

// GetVariables returns getVariablesResponse.Variables, and is useful for accessing the field via an interface.
func (v *getVariablesResponse) GetVariables() map[string]interface{} { return v.Variables }

// updatePluginPluginUpdatePlugin includes the requested fields of the GraphQL type Plugin.
type updatePluginPluginUpdatePlugin struct {
	Plugin `json:"-"`
}

// GetId returns updatePluginPluginUpdatePlugin.Id, and is useful for accessing the field via an interface.
func (v *updatePluginPluginUpdatePlugin) GetId() string { return v.Plugin.Id }

// GetName returns updatePluginPluginUpdatePlugin.Name, and is useful for accessing the field via an interface.
func (v *updatePluginPluginUpdatePlugin) GetName() string { return v.Plugin.Name }

// GetFriendlyName returns updatePluginPluginUpdatePlugin.FriendlyName, and is useful for accessing the field via an interface.
func (v *updatePluginPluginUpdatePlugin) GetFriendlyName() string { return v.Plugin.FriendlyName }

// GetProject returns updatePluginPluginUpdatePlugin.Project, and is useful for accessing the field via an interface.
func (v *updatePluginPluginUpdatePlugin) GetProject() PluginProject { return v.Plugin.Project }

func (v *updatePluginPluginUpdatePlugin) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updatePluginPluginUpdatePlugin
		graphql.NoUnmarshalJSON
	}
	firstPass.updatePluginPluginUpdatePlugin = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Plugin)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdatePluginPluginUpdatePlugin struct {
	Id string `json:"id"`

	Name string `json:"name"`

	FriendlyName string `json:"friendlyName"`

	Project PluginProject `json:"project"`
}

func (v *updatePluginPluginUpdatePlugin) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updatePluginPluginUpdatePlugin) __premarshalJSON() (*__premarshalupdatePluginPluginUpdatePlugin, error) {
	var retval __premarshalupdatePluginPluginUpdatePlugin

	retval.Id = v.Plugin.Id
	retval.Name = v.Plugin.Name
	retval.FriendlyName = v.Plugin.FriendlyName
	retval.Project = v.Plugin.Project
	return &retval, nil
}

// updatePluginResponse is returned by updatePlugin on success.
type updatePluginResponse struct {
	// Updates an existing plugin.
	PluginUpdate updatePluginPluginUpdatePlugin `json:"pluginUpdate"`
}

// GetPluginUpdate returns updatePluginResponse.PluginUpdate, and is useful for accessing the field via an interface.
func (v *updatePluginResponse) GetPluginUpdate() updatePluginPluginUpdatePlugin {
	return v.PluginUpdate
}

// updateProjectProjectUpdateProject includes the requested fields of the GraphQL type Project.
type updateProjectProjectUpdateProject struct {
	Project `json:"-"`
}

// GetId returns updateProjectProjectUpdateProject.Id, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetId() string { return v.Project.Id }

// GetName returns updateProjectProjectUpdateProject.Name, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetName() string { return v.Project.Name }

// GetDescription returns updateProjectProjectUpdateProject.Description, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetDescription() string { return v.Project.Description }

// GetIsPublic returns updateProjectProjectUpdateProject.IsPublic, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetIsPublic() bool { return v.Project.IsPublic }

// GetPrDeploys returns updateProjectProjectUpdateProject.PrDeploys, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetPrDeploys() bool { return v.Project.PrDeploys }

// GetTeam returns updateProjectProjectUpdateProject.Team, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetTeam() *ProjectTeam { return v.Project.Team }

// GetEnvironments returns updateProjectProjectUpdateProject.Environments, and is useful for accessing the field via an interface.
func (v *updateProjectProjectUpdateProject) GetEnvironments() ProjectEnvironmentsProjectEnvironmentsConnection {
	return v.Project.Environments
}

func (v *updateProjectProjectUpdateProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateProjectProjectUpdateProject
		graphql.NoUnmarshalJSON
	}
	firstPass.updateProjectProjectUpdateProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Project)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateProjectProjectUpdateProject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description string `json:"description"`

	IsPublic bool `json:"isPublic"`

	PrDeploys bool `json:"prDeploys"`

	Team *ProjectTeam `json:"team"`

	Environments ProjectEnvironmentsProjectEnvironmentsConnection `json:"environments"`
}

func (v *updateProjectProjectUpdateProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateProjectProjectUpdateProject) __premarshalJSON() (*__premarshalupdateProjectProjectUpdateProject, error) {
	var retval __premarshalupdateProjectProjectUpdateProject

	retval.Id = v.Project.Id
	retval.Name = v.Project.Name
	retval.Description = v.Project.Description
	retval.IsPublic = v.Project.IsPublic
	retval.PrDeploys = v.Project.PrDeploys
	retval.Team = v.Project.Team
	retval.Environments = v.Project.Environments
	return &retval, nil
}

// updateProjectResponse is returned by updateProject on success.
type updateProjectResponse struct {
	// Updates a project.
	ProjectUpdate updateProjectProjectUpdateProject `json:"projectUpdate"`
}

// GetProjectUpdate returns updateProjectResponse.ProjectUpdate, and is useful for accessing the field via an interface.
func (v *updateProjectResponse) GetProjectUpdate() updateProjectProjectUpdateProject {
	return v.ProjectUpdate
}

// updateServiceResponse is returned by updateService on success.
type updateServiceResponse struct {
	// Updates a service.
	ServiceUpdate updateServiceServiceUpdateService `json:"serviceUpdate"`
}

// GetServiceUpdate returns updateServiceResponse.ServiceUpdate, and is useful for accessing the field via an interface.
func (v *updateServiceResponse) GetServiceUpdate() updateServiceServiceUpdateService {
	return v.ServiceUpdate
}

// updateServiceServiceUpdateService includes the requested fields of the GraphQL type Service.
type updateServiceServiceUpdateService struct {
	Service `json:"-"`
}

// GetId returns updateServiceServiceUpdateService.Id, and is useful for accessing the field via an interface.
func (v *updateServiceServiceUpdateService) GetId() string { return v.Service.Id }

// GetName returns updateServiceServiceUpdateService.Name, and is useful for accessing the field via an interface.
func (v *updateServiceServiceUpdateService) GetName() string { return v.Service.Name }

// GetProjectId returns updateServiceServiceUpdateService.ProjectId, and is useful for accessing the field via an interface.
func (v *updateServiceServiceUpdateService) GetProjectId() string { return v.Service.ProjectId }

func (v *updateServiceServiceUpdateService) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*updateServiceServiceUpdateService
		graphql.NoUnmarshalJSON
	}
	firstPass.updateServiceServiceUpdateService = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Service)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalupdateServiceServiceUpdateService struct {
	Id string `json:"id"`

	Name string `json:"name"`

	ProjectId string `json:"projectId"`
}

func (v *updateServiceServiceUpdateService) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *updateServiceServiceUpdateService) __premarshalJSON() (*__premarshalupdateServiceServiceUpdateService, error) {
	var retval __premarshalupdateServiceServiceUpdateService

	retval.Id = v.Service.Id
	retval.Name = v.Service.Name
	retval.ProjectId = v.Service.ProjectId
	return &retval, nil
}

// upsertVariableResponse is returned by upsertVariable on success.
type upsertVariableResponse struct {
	// Upserts a variable.
	VariableUpsert bool `json:"variableUpsert"`
}

// GetVariableUpsert returns upsertVariableResponse.VariableUpsert, and is useful for accessing the field via an interface.
func (v *upsertVariableResponse) GetVariableUpsert() bool { return v.VariableUpsert }

func createEnvironment(
	ctx context.Context,
	client graphql.Client,
	input EnvironmentCreateInput,
) (*createEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "createEnvironment",
		Query: `
mutation createEnvironment ($input: EnvironmentCreateInput!) {
	environmentCreate(input: $input) {
		... Environment
	}
}
fragment Environment on Environment {
	id
	name
	projectId
}
`,
		Variables: &__createEnvironmentInput{
			Input: input,
		},
	}
	var err error

	var data createEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createPlugin(
	ctx context.Context,
	client graphql.Client,
	input PluginCreateInput,
) (*createPluginResponse, error) {
	req := &graphql.Request{
		OpName: "createPlugin",
		Query: `
mutation createPlugin ($input: PluginCreateInput!) {
	pluginCreate(input: $input) {
		... Plugin
	}
}
fragment Plugin on Plugin {
	id
	name
	friendlyName
	project {
		id
	}
}
`,
		Variables: &__createPluginInput{
			Input: input,
		},
	}
	var err error

	var data createPluginResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createProject(
	ctx context.Context,
	client graphql.Client,
	input ProjectCreateInput,
) (*createProjectResponse, error) {
	req := &graphql.Request{
		OpName: "createProject",
		Query: `
mutation createProject ($input: ProjectCreateInput!) {
	projectCreate(input: $input) {
		... Project
	}
}
fragment Project on Project {
	id
	name
	description
	isPublic
	prDeploys
	team {
		id
	}
	environments {
		edges {
			node {
				id
				name
				createdAt
			}
		}
	}
}
`,
		Variables: &__createProjectInput{
			Input: input,
		},
	}
	var err error

	var data createProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func createService(
	ctx context.Context,
	client graphql.Client,
	input ServiceCreateInput,
) (*createServiceResponse, error) {
	req := &graphql.Request{
		OpName: "createService",
		Query: `
mutation createService ($input: ServiceCreateInput!) {
	serviceCreate(input: $input) {
		... Service
	}
}
fragment Service on Service {
	id
	name
	projectId
}
`,
		Variables: &__createServiceInput{
			Input: input,
		},
	}
	var err error

	var data createServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteEnvironment(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "deleteEnvironment",
		Query: `
mutation deleteEnvironment ($id: String!) {
	environmentDelete(id: $id)
}
`,
		Variables: &__deleteEnvironmentInput{
			Id: id,
		},
	}
	var err error

	var data deleteEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deletePlugin(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deletePluginResponse, error) {
	req := &graphql.Request{
		OpName: "deletePlugin",
		Query: `
mutation deletePlugin ($id: String!) {
	pluginDelete(id: $id)
}
`,
		Variables: &__deletePluginInput{
			Id: id,
		},
	}
	var err error

	var data deletePluginResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteProject(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteProjectResponse, error) {
	req := &graphql.Request{
		OpName: "deleteProject",
		Query: `
mutation deleteProject ($id: String!) {
	projectDelete(id: $id)
}
`,
		Variables: &__deleteProjectInput{
			Id: id,
		},
	}
	var err error

	var data deleteProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteService(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*deleteServiceResponse, error) {
	req := &graphql.Request{
		OpName: "deleteService",
		Query: `
mutation deleteService ($id: String!) {
	serviceDelete(id: $id)
}
`,
		Variables: &__deleteServiceInput{
			Id: id,
		},
	}
	var err error

	var data deleteServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func deleteVariable(
	ctx context.Context,
	client graphql.Client,
	input VariableDeleteInput,
) (*deleteVariableResponse, error) {
	req := &graphql.Request{
		OpName: "deleteVariable",
		Query: `
mutation deleteVariable ($input: VariableDeleteInput!) {
	variableDelete(input: $input)
}
`,
		Variables: &__deleteVariableInput{
			Input: input,
		},
	}
	var err error

	var data deleteVariableResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getEnvironment(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getEnvironmentResponse, error) {
	req := &graphql.Request{
		OpName: "getEnvironment",
		Query: `
query getEnvironment ($id: String!) {
	environment(id: $id) {
		... Environment
	}
}
fragment Environment on Environment {
	id
	name
	projectId
}
`,
		Variables: &__getEnvironmentInput{
			Id: id,
		},
	}
	var err error

	var data getEnvironmentResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getEnvironments(
	ctx context.Context,
	client graphql.Client,
	projectId string,
) (*getEnvironmentsResponse, error) {
	req := &graphql.Request{
		OpName: "getEnvironments",
		Query: `
query getEnvironments ($projectId: String!) {
	environments(projectId: $projectId) {
		edges {
			node {
				... Environment
			}
		}
	}
}
fragment Environment on Environment {
	id
	name
	projectId
}
`,
		Variables: &__getEnvironmentsInput{
			ProjectId: projectId,
		},
	}
	var err error

	var data getEnvironmentsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getPlugin(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getPluginResponse, error) {
	req := &graphql.Request{
		OpName: "getPlugin",
		Query: `
query getPlugin ($id: String!) {
	plugin(id: $id) {
		... Plugin
	}
}
fragment Plugin on Plugin {
	id
	name
	friendlyName
	project {
		id
	}
}
`,
		Variables: &__getPluginInput{
			Id: id,
		},
	}
	var err error

	var data getPluginResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getPluginVariables(
	ctx context.Context,
	client graphql.Client,
	projectId string,
	environmentId string,
	pluginId string,
) (*getPluginVariablesResponse, error) {
	req := &graphql.Request{
		OpName: "getPluginVariables",
		Query: `
query getPluginVariables ($projectId: String!, $environmentId: String!, $pluginId: String!) {
	variables(environmentId: $environmentId, projectId: $projectId, pluginId: $pluginId, unrendered: false)
}
`,
		Variables: &__getPluginVariablesInput{
			ProjectId:     projectId,
			EnvironmentId: environmentId,
			PluginId:      pluginId,
		},
	}
	var err error

	var data getPluginVariablesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getProject(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getProjectResponse, error) {
	req := &graphql.Request{
		OpName: "getProject",
		Query: `
query getProject ($id: String!) {
	project(id: $id) {
		... Project
	}
}
fragment Project on Project {
	id
	name
	description
	isPublic
	prDeploys
	team {
		id
	}
	environments {
		edges {
			node {
				id
				name
				createdAt
			}
		}
	}
}
`,
		Variables: &__getProjectInput{
			Id: id,
		},
	}
	var err error

	var data getProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getService(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getServiceResponse, error) {
	req := &graphql.Request{
		OpName: "getService",
		Query: `
query getService ($id: String!) {
	service(id: $id) {
		... Service
	}
}
fragment Service on Service {
	id
	name
	projectId
}
`,
		Variables: &__getServiceInput{
			Id: id,
		},
	}
	var err error

	var data getServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getSharedVariables(
	ctx context.Context,
	client graphql.Client,
	projectId string,
	environmentId string,
) (*getSharedVariablesResponse, error) {
	req := &graphql.Request{
		OpName: "getSharedVariables",
		Query: `
query getSharedVariables ($projectId: String!, $environmentId: String!) {
	variables(environmentId: $environmentId, projectId: $projectId, unrendered: true)
}
`,
		Variables: &__getSharedVariablesInput{
			ProjectId:     projectId,
			EnvironmentId: environmentId,
		},
	}
	var err error

	var data getSharedVariablesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func getVariables(
	ctx context.Context,
	client graphql.Client,
	projectId string,
	environmentId string,
	serviceId string,
) (*getVariablesResponse, error) {
	req := &graphql.Request{
		OpName: "getVariables",
		Query: `
query getVariables ($projectId: String!, $environmentId: String!, $serviceId: String!) {
	variables(environmentId: $environmentId, projectId: $projectId, serviceId: $serviceId, unrendered: true)
}
`,
		Variables: &__getVariablesInput{
			ProjectId:     projectId,
			EnvironmentId: environmentId,
			ServiceId:     serviceId,
		},
	}
	var err error

	var data getVariablesResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updatePlugin(
	ctx context.Context,
	client graphql.Client,
	id string,
	input PluginUpdateInput,
) (*updatePluginResponse, error) {
	req := &graphql.Request{
		OpName: "updatePlugin",
		Query: `
mutation updatePlugin ($id: String!, $input: PluginUpdateInput!) {
	pluginUpdate(id: $id, input: $input) {
		... Plugin
	}
}
fragment Plugin on Plugin {
	id
	name
	friendlyName
	project {
		id
	}
}
`,
		Variables: &__updatePluginInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updatePluginResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateProject(
	ctx context.Context,
	client graphql.Client,
	id string,
	input ProjectUpdateInput,
) (*updateProjectResponse, error) {
	req := &graphql.Request{
		OpName: "updateProject",
		Query: `
mutation updateProject ($id: String!, $input: ProjectUpdateInput!) {
	projectUpdate(id: $id, input: $input) {
		... Project
	}
}
fragment Project on Project {
	id
	name
	description
	isPublic
	prDeploys
	team {
		id
	}
	environments {
		edges {
			node {
				id
				name
				createdAt
			}
		}
	}
}
`,
		Variables: &__updateProjectInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func updateService(
	ctx context.Context,
	client graphql.Client,
	id string,
	input ServiceUpdateInput,
) (*updateServiceResponse, error) {
	req := &graphql.Request{
		OpName: "updateService",
		Query: `
mutation updateService ($id: String!, $input: ServiceUpdateInput!) {
	serviceUpdate(id: $id, input: $input) {
		... Service
	}
}
fragment Service on Service {
	id
	name
	projectId
}
`,
		Variables: &__updateServiceInput{
			Id:    id,
			Input: input,
		},
	}
	var err error

	var data updateServiceResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func upsertVariable(
	ctx context.Context,
	client graphql.Client,
	input VariableUpsertInput,
) (*upsertVariableResponse, error) {
	req := &graphql.Request{
		OpName: "upsertVariable",
		Query: `
mutation upsertVariable ($input: VariableUpsertInput!) {
	variableUpsert(input: $input)
}
`,
		Variables: &__upsertVariableInput{
			Input: input,
		},
	}
	var err error

	var data upsertVariableResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

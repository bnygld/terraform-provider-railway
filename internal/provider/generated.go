// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package provider

import (
	"context"
	"encoding/json"

	"github.com/Khan/genqlient/graphql"
)

// Project includes the GraphQL fields of Project requested by the fragment Project.
type Project struct {
	Id          string      `json:"id"`
	Name        string      `json:"name"`
	Description *string     `json:"description"`
	PrDeploys   bool        `json:"prDeploys"`
	UpstreamUrl *string     `json:"upstreamUrl"`
	Team        ProjectTeam `json:"team"`
}

// GetId returns Project.Id, and is useful for accessing the field via an interface.
func (v *Project) GetId() string { return v.Id }

// GetName returns Project.Name, and is useful for accessing the field via an interface.
func (v *Project) GetName() string { return v.Name }

// GetDescription returns Project.Description, and is useful for accessing the field via an interface.
func (v *Project) GetDescription() *string { return v.Description }

// GetPrDeploys returns Project.PrDeploys, and is useful for accessing the field via an interface.
func (v *Project) GetPrDeploys() bool { return v.PrDeploys }

// GetUpstreamUrl returns Project.UpstreamUrl, and is useful for accessing the field via an interface.
func (v *Project) GetUpstreamUrl() *string { return v.UpstreamUrl }

// GetTeam returns Project.Team, and is useful for accessing the field via an interface.
func (v *Project) GetTeam() ProjectTeam { return v.Team }

// ProjectTeam includes the requested fields of the GraphQL type Team.
type ProjectTeam struct {
	Id string `json:"id"`
}

// GetId returns ProjectTeam.Id, and is useful for accessing the field via an interface.
func (v *ProjectTeam) GetId() string { return v.Id }

// __getProjectInput is used internally by genqlient
type __getProjectInput struct {
	Id string `json:"id"`
}

// GetId returns __getProjectInput.Id, and is useful for accessing the field via an interface.
func (v *__getProjectInput) GetId() string { return v.Id }

// getProjectProject includes the requested fields of the GraphQL type Project.
type getProjectProject struct {
	Project `json:"-"`
}

// GetId returns getProjectProject.Id, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetId() string { return v.Project.Id }

// GetName returns getProjectProject.Name, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetName() string { return v.Project.Name }

// GetDescription returns getProjectProject.Description, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetDescription() *string { return v.Project.Description }

// GetPrDeploys returns getProjectProject.PrDeploys, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetPrDeploys() bool { return v.Project.PrDeploys }

// GetUpstreamUrl returns getProjectProject.UpstreamUrl, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetUpstreamUrl() *string { return v.Project.UpstreamUrl }

// GetTeam returns getProjectProject.Team, and is useful for accessing the field via an interface.
func (v *getProjectProject) GetTeam() ProjectTeam { return v.Project.Team }

func (v *getProjectProject) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*getProjectProject
		graphql.NoUnmarshalJSON
	}
	firstPass.getProjectProject = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.Project)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalgetProjectProject struct {
	Id string `json:"id"`

	Name string `json:"name"`

	Description *string `json:"description"`

	PrDeploys bool `json:"prDeploys"`

	UpstreamUrl *string `json:"upstreamUrl"`

	Team ProjectTeam `json:"team"`
}

func (v *getProjectProject) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *getProjectProject) __premarshalJSON() (*__premarshalgetProjectProject, error) {
	var retval __premarshalgetProjectProject

	retval.Id = v.Project.Id
	retval.Name = v.Project.Name
	retval.Description = v.Project.Description
	retval.PrDeploys = v.Project.PrDeploys
	retval.UpstreamUrl = v.Project.UpstreamUrl
	retval.Team = v.Project.Team
	return &retval, nil
}

// getProjectResponse is returned by getProject on success.
type getProjectResponse struct {
	// Get a project by ID
	Project getProjectProject `json:"project"`
}

// GetProject returns getProjectResponse.Project, and is useful for accessing the field via an interface.
func (v *getProjectResponse) GetProject() getProjectProject { return v.Project }

func getProject(
	ctx context.Context,
	client graphql.Client,
	id string,
) (*getProjectResponse, error) {
	req := &graphql.Request{
		OpName: "getProject",
		Query: `
query getProject ($id: String!) {
	project(id: $id) {
		... Project
	}
}
fragment Project on Project {
	id
	name
	description
	prDeploys
	upstreamUrl
	team {
		id
	}
}
`,
		Variables: &__getProjectInput{
			Id: id,
		},
	}
	var err error

	var data getProjectResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
